// 콜백 패턴의 단점

/*
    1. 콜백 헬

    동기식 처리모델 -
    동기식 처리모델은 직렬적으로 명령을 수행한다.
    즉 1번 명령이 수행될동안 그 다음 2번 명령은 1번 명령이 수행될 동안 블로킹 된다.
    
    완료     진행    대기    대기
    [1번]   [2번]   [3번]   [4번]


    비동기식 처리모델 -
    비동기식 처리모델은 병렬적으로 명령을 수행한다.
    즉, 명령이 수행완료 상태가 아니더라도 대기하지 않고
    즉시 다음 명령을 수행한다.

    완료    진행중   완료   진행중
    [1번]   [2번]   [3번]   [4번]

    자바스크립트에서 빈번하게 사용되는 비동기식 처리 모델은 요청을 병렬로 처리하여
    다른 요청이 블로킹 되지 않는 장점이 있다.

    하지만 비동기 처리를 위해 콜백 패턴을 사용하려면 처리 순서를 보장하기 위해
    여러 개의 콜백 함수가 네스팅(중첩)되어 복잡도가 높아지는
    콜백 헬이 발생하는 단점이 있다.
*/

(value)=>{
    step1(function(value1) {
        step2(value1, function(value2) {
            step3(value2, function(value3) {
                step4(value3, function(value4) {
                    step5(value4, function(value5) {
                        // value5를 사용하는 처리
                    });
                });
            });
        });
    });
}

function callBackHell(){
    // jquery의 ajax 문법입니다.
    $.ajax({
        url:"/URL",
        type:"POST",
        data:{data:data},
        success:(result)=>{
        },
        error:(err)=>{
        }
    }) 
}

/*
비동기 처리는 성공하든, 실패하든 결과값이 주어지며
이 결과에 따라 해야 하는 행동이 콜백함수 내에서 정의되어
가독성이 떨어지고 코드가 더 복잡해진다.
또한 어느 시점에 완료될 지 알 수 없는것이 에러 처리를 곤란하게 만든다.
*/



/*
    2. 에러 처리의 한계

    콜백 방식의 비동기 처리가 갖는 문제점 중에서 가장 심각한 것은 에러 처리가 곤란하다는 것이다.
*/
try {
    setTimeout(() => { throw 'Error!'; }, 1000);
  } catch (e) {
    console.log('에러를 캐치하지 못한다..');
    console.log(e);
}
/*
    try 블록 내에서 setTimeout 함수가 실행되면 1초 후에 콜백 함수가 실행되고 이 콜백 함수는 예외를 발생시킨다.
    하지만 이 예외는 catch 블록에서 캐치되지 않는다.

    비동기 처리 함수의 콜백 함수는 해당 이벤트가 발생하면 이벤트 큐(Event queue)로 이동한 후
    호출 스택이 비어졌을 때, 호출 스택으로 이동되어 실행된다.

    setTimeout 함수는 비동기 함수이므로 콜백 함수의 실행 완료를 기다리지 않고
    즉시 종료되어 호출 스택에서 제거된다.
    이후 에러를 던지는 이벤트가 발생하면 setTimeout 함수는 이미 호출 스택에서 제거된 상태이다.
    이는 콜백함수를 호출한 것이 setTimeout 함수가 아니라는 것을 의미한다.
    콜백함수의 호출자가 setTimeout 함수라면 호출 스택에 setTimeout 함수가 함께 존재해야하기 때문이다.

    예외는 호출자 방향으로 전파되지만 콜백 함수를 호출한것은 setTimeout 함수가 아니기 때문에
    catch 블록에서 캐치되지 않아 프로세스는 종료된다.

    이러한 문제를 극복하기 위해 Promise가 제안되었다. Promise는 ES6에 정식 채택되어 IE를 제외한 대부분의 브라우저가 지원하고 있다.
*/